{"version":3,"sources":["firebase.js","components/Single.js","components/Grid.js","components/Form.js","components/App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Single","props","className","src","alt","item","title","prenom","nom","compagnie","email","notes","onClick","deleteData","bind","id","Grid","docID","this","items","map","i","key","renderList","Component","Form","addContact","e","preventDefault","newContact","target","value","firestore","collection","add","document","getElementById","reset","updateData","onSubmit","type","htmlFor","name","App","state","contacts","get","then","snapshot","forEach","doc","contact","Object","assign","data","push","setState","catch","err","console","log","delete","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d583d50c.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nconst config = {\n    apiKey: \"AIzaSyCqM7m9yCFLEP0Ha4owxO3wz4ZBRtzhDgU\",\n    authDomain: \"crm-project-c614d.firebaseapp.com\",\n    databaseURL: \"https://crm-project-c614d.firebaseio.com\",\n    projectId: \"crm-project-c614d\",\n    storageBucket: \"crm-project-c614d.appspot.com\",\n    messagingSenderId: \"61175138172\",\n    appId: \"1:61175138172:web:0e16e73a15e9ecdb4986f9\",\n    measurementId: \"G-V3SXVD8EW2\",\n}\n\nfirebase.initializeApp(config);\n\nexport default firebase;","import React from 'react';\n\nconst Single = (props) => {\n    return ( \n        <li className=\"col s12 l6\">\n            <div className=\"card\">\n                <div className=\"card-image\">\n                    <img src=\"./oushdr.jpeg\" alt={props.item.title}/>\n                    <span className=\"card-title\">{props.item.prenom} {props.item.nom} - {props.item.compagnie}</span>\n                </div>\n                <div className=\"card-content\">\n                    <span className=\"card-title\">{props.item.email}</span>\n                    <div className=\"row\">\n                        <div className=\"col l6 center\">\n                            <blockquote><h5>{props.item.notes}</h5></blockquote>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"card-action\">\n                    <button className=\"waves-effect waves-light btn red darken-4\" onClick= {props.deleteData.bind(this, props.item.id)} >\n                        <i className=\"material-icons\">delete</i>\n                        </button>\n                </div>\n            </div>\n        </li>\n     );\n}\n \nexport default Single;","import React, { Component } from 'react';\nimport Single from './Single';\n\nclass Grid extends Component {\n    deleteData(docID) {\n        this.props.deleteData(docID);\n    }\n\n    renderList() {\n        return this.props.items.map((item, i) => (\n            <Single key={i+1} item={item} deleteData={this.deleteData.bind(this)}/>\n        ));\n    }\n    render() { \n        return ( \n            <div>\n                <div className=\"row\">\n                    <ul>\n                        {this.renderList()}\n                    </ul>\n                </div>\n            </div>\n         );\n    }\n}\n \nexport default Grid;","import React, { Component } from 'react';\nimport firebase from '../firebase';\n\nclass Form extends Component {\n    updateData() {\n        this.props.updateData();\n    }\n\n    addContact = (e) => {\n        e.preventDefault();\n\n        let newContact = {\n            prenom: e.target.prenom.value,\n            nom: e.target.nom.value,\n            email: e.target.email.value,\n            compagnie: e.target.compagnie.value,\n            notes: e.target.notes.value,\n        }\n\n        const db = firebase.firestore();\n        //const settings = {timestampsInSnapshots: true};\n        //db.settings(settings);\n\n        db.collection('contacts').add(newContact);\n        // reset formulaire\n        document.getElementById(\"addContact\").reset();\n        this.updateData();\n    }\n\n    render() { \n        return ( \n            <div className=\"row\">\n                <form className=\"col s12\" id=\"addContact\" onSubmit={this.addContact.bind(this)}>\n                    <div className=\"row\">\n                        <div className=\"input-field col s6\">\n                            <input id=\"prenom\" type=\"text\" className=\"validate\"/>\n                            <label htmlFor=\"prenom\">Pr√©nom</label>\n                        </div>\n                        <div className=\"input-field col s6\">\n                            <input id=\"nom\" type=\"text\" className=\"validate\"/>\n                            <label htmlFor=\"nom\">Nom de famille</label>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"input-field col s6\">\n                            <input id=\"email\" type=\"text\" className=\"validate\"/>\n                            <label htmlFor=\"email\">Email</label>\n                        </div>\n                        <div className=\"input-field col s6\">\n                            <input id=\"compagnie\" type=\"text\" className=\"validate\"/>\n                            <label htmlFor=\"compagnie\">Compagnie</label>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"input-field col s8\">\n                            <input id=\"notes\" type=\"text\" className=\"validate\"/>\n                            <label htmlFor=\"notes\">Notes</label>\n                        </div>\n                        <div className=\"input-field col s4\">\n                            <button className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">Ajouter</button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n         );\n    }\n}\n \nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from '../firebase';\nimport Grid from './Grid';\nimport Form from './Form';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      contacts: []\n     };\n  }\n\nupdateData() {\n  const db = firebase.firestore();\n  //const settings = {timestampsInSnapshots: true};\n  //db.settings(settings);\n\n  db.collection('contacts').get()\n    .then((snapshot) => {\n      let contacts = [];\n      snapshot.forEach((doc) => {\n        let contact = Object.assign({id: doc.id }, doc.data());\n        contacts.push(contact);\n      });\n      this.setState({\n        contacts: contacts\n      });\n    })\n    .catch((err) => {\n      console.log('Erreur!', err);\n    });\n  } \n  \n  deleteData(docID) {\n    const db = firebase.firestore();\n    //const settings = {timestampsInSnapshots: true};\n    //db.settings(settings);\n\n    db.collection('contacts').doc(docID).delete();\n    this.updateData();\n  }\n\n  componentWillMount() {\n    this.updateData();\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"navbar-fixed\">\n          <nav className=\"blue lighten-2\">\n            <div className=\"nav-wrapper\">\n              <a href=\"/\" className=\"brand-logo center\">Contacts</a>\n            </div>\n          </nav>\n        </div>\n        <div>\n          <Form updateData={this.updateData.bind(this)}/>\n          <Grid items={this.state.contacts} deleteData={this.deleteData.bind(this)}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}